%{
#include <stdio.h>
#include <math.h>
#include <string.h>

int lines = 1;
int lastST = 0;
int lastPIF = 0;
char ST[100][100];
char PIF[100][100];

void addToST(char* token){
    for(int i=0;i<lastST;i++) {
        if(strcmp(token, ST[i]) == 0) {
            return;
        }
    }
    strncpy(ST[lastST],token,99);
    lastST++;
}

int findInST(char* token) {
    for(int i=0;i<lastST;i++) {
        if(strcmp(token, ST[i]) == 0) {
            return i;
        }
    }
}

void addToPIF(char* token){
    strncpy(PIF[lastPIF]+1,token,98);
    lastPIF++;
}

void addToPIFid(char* token) {
    PIF[lastPIF][0] = findInST(token);
    addToPIF("identifier");
}

%}

%option noyywrap
%option caseless

IDENTIFIER                  [a-zA-Z_][a-zA-Z_0-9]*
DIGIT [0-9]
LETTER [A-Za-z_]
ID {LETTER}({LETTER}|{DIGIT})*
NUMBER "-"?[1-9]{DIGIT}*
BOOL_CONSTANT "T"|"F"
COMMENT "#".*\n
CHARACTER "'"({LETTER}|{DIGIT})"'"
STRING ["]({LETTER}|{DIGIT})*["]
CONSTANT {STRING}|{NUMBER}|{BOOL_CONSTANT}


%%

{COMMENT} { }

"bool" { addToPIF(yytext); printf("Type: %s\n", yytext); }
"int" { addToPIF(yytext); printf("Type: %s\n", yytext); }
"char" { addToPIF(yytext); printf("Type: %s\n", yytext); }
"str" { addToPIF(yytext); printf("Type: %s\n", yytext); }
"list" { addToPIF(yytext); printf("Type: %s\n", yytext); }

"test" { addToPIF(yytext); printf("Reserved word: %s\n", yytext); }
"while" { addToPIF(yytext); printf("Reserved word: %s\n", yytext); }
"else" { addToPIF(yytext); printf("Reserved word: %s\n", yytext); }
"read" { addToPIF(yytext); printf("Reserved word: %s\n", yytext); }
"write" { addToPIF(yytext); printf("Reserved word: %s\n", yytext); }

"(" { addToPIF(yytext); printf("Separator: %s\n", yytext); }
")" { addToPIF(yytext); printf("Separator: %s\n", yytext); }
"{" { addToPIF(yytext); printf("Separator: %s\n", yytext); }
"}" { addToPIF(yytext); printf("Separator: %s\n", yytext); }
"]" { addToPIF(yytext); printf("Separator: %s\n", yytext); }
"[" { addToPIF(yytext); printf("Separator: %s\n", yytext); }

"<>" { addToPIF(yytext); printf("Operator: %s\n", yytext); }
"==" { addToPIF(yytext); printf("Operator: %s\n", yytext); }
">=" { addToPIF(yytext); printf("Operator: %s\n", yytext); }
"<=" { addToPIF(yytext); printf("Operator: %s\n", yytext); }
"-" { addToPIF(yytext); printf("Operator: %s\n", yytext); }
"+" { addToPIF(yytext); printf("Operator: %s\n", yytext); }
"*" { addToPIF(yytext); printf("Operator: %s\n", yytext); }
"/" { addToPIF(yytext); printf("Operator: %s\n", yytext); }
"=" { addToPIF(yytext); printf("Operator: %s\n", yytext); }
"<" { addToPIF(yytext); printf("Operator: %s\n", yytext); }
">" { addToPIF(yytext); printf("Operator: %s\n", yytext); }
"and" { addToPIF(yytext); printf("Operator: %s\n", yytext); }
"or" { addToPIF(yytext); printf("Operator: %s\n", yytext); }

{IDENTIFIER}  { addToST(yytext); addToPIFid(yytext); printf("Identifier: %s\n", yytext); }
{CONSTANT}    { addToST(yytext); addToPIFid(yytext); printf("Constant: %s\n", yytext); }

[ \t]                       { }
[\n]                        { lines++; }

.                           { printf("Error at line: %d\n", lines); }

%%

int main (int argc, char **argv)
{
    ++argv, --argc;
    if (argc > 0)
    yyin = fopen(argv[0], "r");
    else
    yyin = stdin;
    yylex();

    printf("\nSymbol table:\n");
    for (int i=0;i<lastST;i++) {
        printf("%d - %s\n", i, ST[i]);
    }
    printf("\nPIF:\n");
    for (int i=0;i<lastPIF;i++) {
        printf("%s - %d\n", PIF[i]+1, PIF[i][0]);
    }
}